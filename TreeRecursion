/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package treerecursion;

/**
 *
 * @author Rini
 */
public class TreeRecursion {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        TreeNode n1=new TreeNode(40);
        n1.insert(20);
        n1.insert(10);
        n1.insert(30);
        n1.insert(60);
        n1.insert(50);
        n1.insert(70);
        n1.insert(5);
        n1.insert(45);
        n1.insert(55);
        if (n1.contains(10)){
            System.out.println("Tree contins 10");
        }else{
        System.out.println("Tree does not contain 10");
        }
        System.out.println("Print InOrder");
        n1.printInOrder();
        System.out.println("Print PostOrder");
        n1.printPostOrder();
        System.out.println("Print PreOrder");
        n1.printPreOrder();
        System.out.println("Print Lowest Common Ancestor");
        System.out.println(n1.LCAncestor(n1,5, 30).data);
    }
    
    public static class TreeNode{
    int data;
    TreeNode left, right;
    public TreeNode(int data){
        this.data=data;
    }    
    
    public void insert(int value){
        if (value<=data){
            if (left==null){
                left=new TreeNode(value);
            }else{
                left.insert(value);
            }
        }else{
            if (right==null){
                right=new TreeNode(value);
            }else{
                right.insert(value);
            }
        }
    }
    
    public boolean contains(int value){
        if (value==data){
            return true;
        }else if (value<data){
            if (left==null){
                return false;
            }else{
                return left.contains(value);
            }            
        }else{
            if (right==null){
                return false;
            }else{
                return right.contains(value);
            }            
        }   
    }
    
    public void printInOrder(){
        if (left!=null){
            left.printInOrder();
        }
        System.out.println(data);
        if (right!=null){
            right.printInOrder();
        }
    }
        public void printPostOrder(){
        if (left!=null){
            left.printPostOrder();
        }
        if (right!=null){
            right.printPostOrder();
        }
        System.out.println(data);
    }
        public void printPreOrder(){
        System.out.println(data);
        if (left!=null){
            left.printPreOrder();
        }
        if (right!=null){
            right.printPreOrder();
        }
        
    }
        //LCA=Lowest common ancestor
        // This function returns pointer to LCA of two given
    // values n1 and n2. This function assumes that n1 and
    // n2 are present in Binary Tree
        public TreeNode LCAncestor(TreeNode node, int val1,int val2){
            // Base case
            if (node==null){
            return null;}
            
            // If either n1 or n2 matches with root's key, report
        // the presence by returning root (Note that if a key is
        // ancestor of other, then the ancestor key becomes LCA
            if (node.data ==val1 ||node.data == val2){
                return node;                
            }
            
            // Look for keys in left and right subtrees
            TreeNode leftLCA=LCAncestor(node.left, val1, val2);
            TreeNode rightLCA =LCAncestor(node.right, val1,val2);
            
            
        // If both of the above calls return Non-NULL, then one key
        // is present in once subtree and other is present in other,
        // So this node is the LCA        
            if (leftLCA!=null && rightLCA!=null){
                return node;
            }
            // Otherwise check if left subtree or right subtree is LCA
        return (leftLCA != null) ? leftLCA : rightLCA;
            
        }
    } 
}
